[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nfrom shiny import render, reactive\nimport palmerpenguins\nimport seaborn as sns\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\nui.page_opts(title=\"Palmer Penguins: Hansen\", fillable=True)\n\n# Add a Shiny UI sidebar for user interaction\n# Use the ui.sidebar() function to create a sidebar\n# Set the open parameter to \"open\" to make the sidebar open by default\n# Use a with block to add content to the sidebar\nwith ui.sidebar(open=\"open\"):\n    # Use the ui.h2() function to add a 2nd level header to the sidebar\n    #   pass in a string argument (in quotes) to set the header text to \"Sidebar\"\n    ui.h2(\"Sidebar\")\n\n    # Use ui.input_selectize() to create a dropdown input to choose a column\n    #   pass in three arguments:\n    #   the name of the input (in quotes), e.g., \"selected_attribute\"\n    #   the label for the input (in quotes)\n    #   a list of options for the input (in square brackets)\n    #   e.g. [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Attribute for Histograms:\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n\n    # Use ui.input_numeric() to create a numeric input for the number of Plotly histogram bins\n    #   pass in two arguments:\n    #   the name of the input (in quotes), e.g. \"plotly_bin_count\"\n    #   the label for the input (in quotes)\n    ui.input_numeric(\"plotly_bin_count\", \"Bin Count for Plotly Chart\", 5)\n\n    # Use ui.input_slider() to create a slider input for the number of Seaborn bins\n    #   pass in four arguments:\n    #   the name of the input (in quotes), e.g. \"seaborn_bin_count\"\n    #   the label for the input (in quotes)\n    #   the minimum value for the input (as an integer)\n    #   the maximum value for the input (as an integer)\n    #   the default value for the input (as an integer)\n    ui.input_slider(\"seaborn_bin_count\", \"Bin Count for Seaborn Chart\", 0, 20, 5)\n\n    # Use ui.input_checkbox_group() to create a checkbox group input to filter the species\n    #   pass in five arguments:\n    #   the name of the input (in quotes), e.g.  \"selected_species_list\"\n    #   the label for the input (in quotes)\n    #   a list of options for the input (in square brackets) as [\"Adelie\", \"Gentoo\", \"Chinstrap\"]\n    #   a keyword argument selected= a list of selected options for the input (in square brackets)\n    #   a keyword argument inline= a Boolean value (True or False) as you like\n    ui.input_checkbox_group(\n        \"selected_species\",\n        \"Select Species:\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        inline=True,\n    )\n\n    # Use ui.hr() to add a horizontal rule to the sidebar\n    ui.hr()\n\n    # Use ui.a() to add a hyperlink to the sidebar\n    #   pass in two arguments:\n    #   the text for the hyperlink (in quotes), e.g. \"GitHub\"\n    #   a keyword argument href= the URL for the hyperlink (in quotes), e.g. your GitHub repo URL\n    #   a keyword argument target= \"_blank\" to open the link in a new tab\n    ui.a(\n        \"My GitHub Repo\",\n        href=\"https://github.com/nhansen23/cintel-02-data\",\n        target=\"_blank\",\n    )\n\n# When passing in multiple arguments to a function, separate them with commas.\n\nwith ui.layout_columns():\n    with ui.card():\n        ui.card_header(\"Plotly Scatterplot: Species\")\n\n        @render_plotly\n        def plotly_scatterplot():\n            # Create a Plotly scatterplot using Plotly Express\n            # Call px.scatter() function\n            # Pass in six arguments\n            return px.scatter(\n                data_frame=filtered_data(),\n                x=\"body_mass_g\",\n                y=\"bill_depth_mm\",\n                color=\"species\",\n                labels={\n                    \"bill_depth_mm\": \"Bill Depth (mm)\",\n                    \"body_mass_g\": \"Body Mass (g)\"\n                },\n                size_max=8,\n            )\n    \n    with ui.navset_card_underline(title=\"Histograms\"):\n        with ui.nav_panel(\"Plotly Histogram\"):\n            @render_plotly\n            def penguins_plot1():\n                return px.histogram(\n                filtered_data(), x=input.selected_attribute(), nbins=input.plotly_bin_count()\n                )\n\n        with ui.nav_panel(\"Seaborn Histogram\"):\n            @render.plot\n            def penguins_plot2():\n                return sns.histplot(\n                    data=filtered_data(),\n                    x=input.selected_attribute(),\n                    bins=input.seaborn_bin_count(),\n                )\n\nwith ui.navset_card_underline(title=\"Data\"):\n    with ui.nav_panel(\"Data Grid\"):\n        @render.data_frame\n        def penguins_df1():\n            return render.DataGrid(filtered_data())\n    with ui.nav_panel(\"Data Table\"):\n        @render.data_frame\n        def penguins_df2():\n            return render.DataTable(filtered_data())\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    filtered_rows = penguins_df[\"species\"].isin(input.selected_species())\n    return penguins_df[filtered_rows]\n", "type": "text"}]